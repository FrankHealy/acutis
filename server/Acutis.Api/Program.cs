using Microsoft.AspNetCore.Authentication;
using System.Text; using Acutis.Api.Authentication; using Acutis.Application.Services; using Acutis.Infrastructure.Extensions; using Microsoft.AspNetCore.Authentication.JwtBearer; using Microsoft.IdentityModel.Tokens;  var builder = WebApplication.CreateBuilder(args);  builder.Services.AddInfrastructure(builder.Configuration);  builder.Services.AddAuthentication(options =>     {         options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;         options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;     })     .AddJwtBearer(options =>     {         var jwtSection = builder.Configuration.GetSection("Authentication:Jwt");         var signingKey = jwtSection.GetValue<string>("SigningKey") ?? "local-development-secret-change-me";         options.TokenValidationParameters = new TokenValidationParameters         {             ValidateIssuer = false,             ValidateAudience = false,             ValidateIssuerSigningKey = true,             IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(signingKey)),             ClockSkew = TimeSpan.FromMinutes(2)         };     })     .AddScheme<AuthenticationSchemeOptions, ApiKeyAuthenticationHandler>(ApiKeyAuthenticationHandler.SchemeName, _ => { });  builder.Services.AddAuthorization(options => {     options.AddPolicy("Therapy.Read", policy => policy.RequireAuthenticatedUser());     options.AddPolicy("Therapy.Write", policy => policy.RequireAuthenticatedUser()); });  builder.Services.AddControllers(); builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  app.UseExceptionHandler(); app.UseHttpsRedirection();  app.UseAuthentication(); app.UseAuthorization();  app.MapControllers();  app.Run();
