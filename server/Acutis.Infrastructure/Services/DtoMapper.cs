using System;
using System.Collections.Generic;
using System.Linq; using Acutis.Application.DTOs; using Acutis.Domain.Entities;  namespace Acutis.Infrastructure.Services;  internal static class DtoMapper {     public static ResidentDto ToResidentDto(Resident resident) =>         new(             resident.Id,             resident.Psn,             resident.FirstName,             resident.Surname,             resident.Nationality,             resident.WeekNumber,             resident.RoomNumber,             resident.PhotoUrl,             resident.PrimaryAddiction,             resident.Sessions.Any(p => p.HasSpoken),             resident.IsPreviousResident);      public static TherapyTermRatingDto ToTherapyTermRatingDto(TherapyTermRating rating) =>         new(             rating.Id,             rating.ExternalId,             rating.Label,             rating.Description,             rating.Terms.Count);      public static TherapyTermDto ToTherapyTermDto(TherapyTerm term) =>         new(             term.Id,             term.ExternalId,             term.Term,             term.Description,             term.Rating?.Label ?? string.Empty,             term.Rating?.Description ?? string.Empty);      public static ModuleQuestionDto ToModuleQuestionDto(ModuleQuestion question) =>         new(             question.Id,             question.Prompt,             question.IsComposite,             question.Parts                 .OrderBy(p => p.DisplayOrder)                 .Select(p => p.Prompt)                 .ToList());      public static TherapyModuleDto ToTherapyModuleDto(TherapyModule module) =>         new(             module.Id,             module.Title,             module.Body,             module.Questions                 .OrderBy(q => q.DisplayOrder)                 .Select(ToModuleQuestionDto)                 .ToList());      public static GroupSessionParticipantDto ToParticipantDto(GroupSessionParticipant participant) =>         new(             participant.Id,             participant.ResidentId,             participant.Resident is null ? string.Empty : $"{participant.Resident.FirstName} {participant.Resident.Surname}",             participant.AttendanceStatus,             participant.HasSpoken);      public static SessionNoteDto ToSessionNoteDto(SessionNote note) =>         new(             note.ParticipantId,             note.Participant?.ResidentId ?? Guid.Empty,             note.Participant?.Resident is null ? string.Empty : $"{note.Participant.Resident.FirstName} {note.Participant.Resident.Surname}",             note.Body,             note.Comments.Select(c => c.QuickCommentTemplate?.Text ?? string.Empty).ToList(),             note.ModifiedAt ?? note.CreatedAt);      public static GroupSessionDto ToGroupSessionDto(GroupSession session) =>         new(             session.Id,             session.ModuleId,             session.Module?.Title ?? string.Empty,             session.ScheduledAt,             session.Facilitator,             session.Location,             session.IsClosed,             session.Participants.Select(ToParticipantDto).ToList(),             session.Notes.Select(ToSessionNoteDto).ToList());      public static AuditTrailItem ToAuditTrailItem(AuditEntry entry) =>         new(             entry.Id,             entry.CreatedAt,             entry.EntityName,             entry.EntityId,             entry.Action,             entry.CreatedBy,             entry.CreatedBy,             entry.OriginalValues,             entry.CurrentValues,             entry.ChangedColumns,             entry.CorrelationId,             entry.IpAddress); }
